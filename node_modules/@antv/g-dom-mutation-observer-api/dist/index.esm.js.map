{"version":3,"file":"index.esm.js","sources":["../src/dom/MutationRecord.ts","../src/dom/MutationObserver.ts"],"sourcesContent":["import type { IElement } from '@antv/g-lite';\n\nexport class MutationRecord {\n  static copy(original: MutationRecord) {\n    const record = new MutationRecord(original.type, original.target);\n    record.addedNodes = original.addedNodes.slice();\n    record.removedNodes = original.removedNodes.slice();\n    record.previousSibling = original.previousSibling;\n    record.nextSibling = original.nextSibling;\n    record.attributeName = original.attributeName;\n    record.attributeNamespace = original.attributeNamespace;\n    record.oldValue = original.oldValue;\n    return record;\n  }\n\n  addedNodes: IElement[] = [];\n  attributeName: string = null;\n  attributeNamespace: string = null;\n  nextSibling: IElement = null;\n  oldValue: string = null;\n  previousSibling: IElement = null;\n  removedNodes: IElement[] = [];\n  constructor(\n    public type: MutationRecordType,\n    public target: IElement,\n  ) {}\n}\n","/* eslint-disable max-classes-per-file */\nimport type { DisplayObject, IElement } from '@antv/g-lite';\nimport { ElementEvent, MutationEvent, runtime } from '@antv/g-lite';\nimport { MutationRecord } from './MutationRecord';\n\nlet uidCounter = 0;\nconst registrationsTable = new WeakMap<IElement, Registration[]>();\n\nexport class Registration {\n  private transientObservedNodes = [];\n\n  constructor(\n    public observer: MutationObserver,\n    public target: IElement,\n    public options?: MutationObserverInit,\n  ) {}\n\n  enqueue(record: MutationRecord) {\n    const { records } = this.observer;\n    const { length } = records;\n\n    // There are cases where we replace the last record with the new record.\n    // For example if the record represents the same mutation we need to use\n    // the one with the oldValue. If we get same record (this can happen as we\n    // walk up the tree) we ignore the new record.\n    if (records.length > 0) {\n      const lastRecord = records[length - 1];\n      const recordToReplaceLast = selectRecord(lastRecord, record);\n      if (recordToReplaceLast) {\n        records[length - 1] = recordToReplaceLast;\n        return;\n      }\n    } else {\n      scheduleCallback(this.observer);\n    }\n\n    records[length] = record;\n  }\n\n  addListeners() {\n    this.addListeners_(this.target);\n  }\n\n  private addListeners_(node: IElement) {\n    const { options } = this;\n    if (options.attributes)\n      node.addEventListener(ElementEvent.ATTR_MODIFIED, this, true);\n\n    // if (options.characterData) node.addEventListener('DOMCharacterDataModified', this, true);\n\n    if (options.childList)\n      node.addEventListener(ElementEvent.INSERTED, this, true);\n\n    if (options.childList || options.subtree)\n      node.addEventListener(ElementEvent.REMOVED, this, true);\n  }\n\n  removeListeners() {\n    this.removeListeners_(this.target);\n  }\n\n  removeListeners_(node: IElement) {\n    const { options } = this;\n    if (options.attributes)\n      node.removeEventListener(ElementEvent.ATTR_MODIFIED, this, true);\n\n    // if (options.characterData) node.removeEventListener('DOMCharacterDataModified', this, true);\n\n    if (options.childList)\n      node.removeEventListener(ElementEvent.INSERTED, this, true);\n\n    if (options.childList || options.subtree)\n      node.removeEventListener(ElementEvent.REMOVED, this, true);\n  }\n\n  /**\n   * Adds a transient observer on node. The transient observer gets removed\n   * next time we deliver the change records.\n   */\n  // addTransientObserver(node: IElement) {\n  //   // Don't add transient observers on the target itself. We already have all\n  //   // the required listeners set up on the target.\n  //   if (node === this.target) return;\n\n  //   this.addListeners_(node);\n  //   this.transientObservedNodes.push(node);\n  //   let registrations = registrationsTable.get(node);\n  //   if (!registrations) registrationsTable.set(node, (registrations = []));\n\n  //   // We know that registrations does not contain this because we already\n  //   // checked if node === this.target.\n  //   registrations.push(this);\n  // }\n\n  removeTransientObservers() {\n    const { transientObservedNodes } = this;\n    this.transientObservedNodes = [];\n\n    transientObservedNodes.forEach(function (node) {\n      // Transient observers are never added to the target.\n      this.removeListeners_(node);\n\n      const registrations = registrationsTable.get(node);\n      for (let i = 0; i < registrations.length; i++) {\n        if (registrations[i] === this) {\n          registrations.splice(i, 1);\n          // Each node can only have one registered observer associated with\n          // this observer.\n          break;\n        }\n      }\n    }, this);\n  }\n\n  handleEvent(e: MutationEvent) {\n    // Stop propagation since we are managing the propagation manually.\n    // This means that other mutation events on the page will not work\n    // correctly but that is by design.\n    e.stopImmediatePropagation();\n\n    let record: MutationRecord;\n    let target: IElement;\n\n    switch (e.type) {\n      case ElementEvent.ATTR_MODIFIED:\n        // http://dom.spec.whatwg.org/#concept-mo-queue-attributes\n\n        const name = e.attrName;\n        // @ts-ignore\n        const namespace = e.relatedNode.namespaceURI;\n        target = e.target as IElement;\n\n        // 1.\n        record = getRecord('attributes', target);\n        record.attributeName = name;\n        record.attributeNamespace = namespace;\n\n        // 2.\n        const oldValue =\n          e.attrChange === MutationEvent.ADDITION ? null : e.prevValue;\n\n        forEachAncestorAndObserverEnqueueRecord(target, (options) => {\n          // 3.1, 4.2\n          if (!options.attributes) return;\n\n          // 3.2, 4.3\n          if (\n            options.attributeFilter &&\n            options.attributeFilter.length &&\n            options.attributeFilter.indexOf(name) === -1 &&\n            options.attributeFilter.indexOf(namespace) === -1\n          ) {\n            return;\n          }\n          // 3.3, 4.4\n          if (options.attributeOldValue) return getRecordWithOldValue(oldValue);\n\n          // 3.4, 4.5\n          return record;\n        });\n\n        break;\n\n      // case 'DOMCharacterDataModified':\n      //   // http://dom.spec.whatwg.org/#concept-mo-queue-characterdata\n      //   var target = e.target;\n\n      //   // 1.\n      //   var record = getRecord('characterData', target);\n\n      //   // 2.\n      //   var oldValue = e.prevValue;\n\n      //   forEachAncestorAndObserverEnqueueRecord(target, function(options) {\n      //     // 3.1, 4.2\n      //     if (!options.characterData)\n      //       return;\n\n      //     // 3.2, 4.3\n      //     if (options.characterDataOldValue)\n      //       return getRecordWithOldValue(oldValue);\n\n      //     // 3.3, 4.4\n      //     return record;\n      //   });\n\n      //   break;\n\n      case ElementEvent.REMOVED:\n      // this.addTransientObserver(e.target as IElement);\n      // Fall through.\n      case ElementEvent.INSERTED:\n        // http://dom.spec.whatwg.org/#concept-mo-queue-childlist\n        target = e.relatedNode;\n        const changedNode = e.target as IElement;\n        let addedNodes: IElement[];\n        let removedNodes: IElement[];\n        if (e.type === ElementEvent.INSERTED) {\n          addedNodes = [changedNode];\n          removedNodes = [];\n        } else {\n          addedNodes = [];\n          removedNodes = [changedNode];\n        }\n        const { previousSibling } = changedNode;\n        const { nextSibling } = changedNode;\n\n        // 1.\n        record = getRecord('childList', target);\n        record.addedNodes = addedNodes;\n        record.removedNodes = removedNodes;\n        record.previousSibling = previousSibling as IElement;\n        record.nextSibling = nextSibling as IElement;\n\n        forEachAncestorAndObserverEnqueueRecord(target, function (options) {\n          // 2.1, 3.2\n          if (!options.childList) return;\n\n          // 2.2, 3.3\n          return record;\n        });\n    }\n\n    clearRecords();\n  }\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n * @see https://github.com/googlearchive/MutationObservers/blob/master/MutationObserver.js\n */\nexport class MutationObserver {\n  nodes: IElement[] = [];\n  records: MutationRecord[] = [];\n  uid = uidCounter++;\n\n  constructor(public callback: MutationCallback) {}\n\n  observe(target: DisplayObject, options?: MutationObserverInit) {\n    // 1.1\n    if (\n      (!options.childList && !options.attributes && !options.characterData) ||\n      // 1.2\n      (options.attributeOldValue && !options.attributes) ||\n      // 1.3\n      (options.attributeFilter &&\n        options.attributeFilter.length &&\n        !options.attributes) ||\n      // 1.4\n      (options.characterDataOldValue && !options.characterData)\n    ) {\n      throw new SyntaxError();\n    }\n\n    let registrations = registrationsTable.get(target);\n    if (!registrations) registrationsTable.set(target, (registrations = []));\n\n    // 2\n    // If target's list of registered observers already includes a registered\n    // observer associated with the context object, replace that registered\n    // observer's options with options.\n    let registration: Registration;\n    for (let i = 0; i < registrations.length; i++) {\n      if (registrations[i].observer === this) {\n        registration = registrations[i];\n        registration.removeListeners();\n        registration.options = options;\n        break;\n      }\n    }\n\n    // 3.\n    // Otherwise, add a new registered observer to target's list of registered\n    // observers with the context object as the observer and options as the\n    // options, and add target to context object's list of nodes on which it\n    // is registered.\n    if (!registration) {\n      registration = new Registration(this, target, options);\n      registrations.push(registration);\n      this.nodes.push(target);\n    }\n\n    registration.addListeners();\n  }\n\n  disconnect() {\n    this.nodes.forEach((node) => {\n      const registrations = registrationsTable.get(node);\n      for (let i = 0; i < registrations.length; i++) {\n        const registration = registrations[i];\n        if (registration.observer === this) {\n          registration.removeListeners();\n          registrations.splice(i, 1);\n          // Each node can only have one registered observer associated with\n          // this observer.\n          break;\n        }\n      }\n    }, this);\n    this.records = [];\n  }\n\n  takeRecords() {\n    const copyOfRecords = this.records;\n    this.records = [];\n    return copyOfRecords;\n  }\n}\n\n// We keep track of the two (possibly one) records used in a single mutation.\nlet currentRecord: MutationRecord;\nlet recordWithOldValue;\n\n/**\n * Creates a record without |oldValue| and caches it as |currentRecord| for\n * later use.\n */\nfunction getRecord(type: MutationRecordType, target: IElement) {\n  return (currentRecord = new MutationRecord(type, target));\n}\n\n/**\n * Gets or creates a record with |oldValue| based in the |currentRecord|\n */\nfunction getRecordWithOldValue(oldValue: any) {\n  if (recordWithOldValue) return recordWithOldValue;\n  recordWithOldValue = MutationRecord.copy(currentRecord);\n  recordWithOldValue.oldValue = oldValue;\n  return recordWithOldValue;\n}\n\nfunction clearRecords() {\n  currentRecord = recordWithOldValue = undefined;\n}\n\n/**\n * Whether the record represents a record from the current\n * mutation event.\n */\nfunction recordRepresentsCurrentMutation(record: MutationRecord) {\n  return record === recordWithOldValue || record === currentRecord;\n}\n\n/**\n * Selects which record, if any, to replace the last record in the queue.\n * This returns |null| if no record should be replaced.\n */\nfunction selectRecord(lastRecord: MutationRecord, newRecord: MutationRecord) {\n  if (lastRecord === newRecord) return lastRecord;\n\n  // Check if the the record we are adding represents the same record. If\n  // so, we keep the one with the oldValue in it.\n  if (recordWithOldValue && recordRepresentsCurrentMutation(lastRecord))\n    return recordWithOldValue;\n\n  return null;\n}\n\nfunction removeTransientObserversFor(observer: MutationObserver) {\n  observer.nodes.forEach((node) => {\n    const registrations = registrationsTable.get(node);\n    if (!registrations) return;\n    registrations.forEach(function (registration) {\n      if (registration.observer === observer)\n        registration.removeTransientObservers();\n    });\n  });\n}\n\n/**\n * This function is used for the \"For each registered observer observer (with\n * observer's options as options) in target's list of registered observers,\n * run these substeps:\" and the \"For each ancestor ancestor of target, and for\n * each registered observer observer (with options options) in ancestor's list\n * of registered observers, run these substeps:\" part of the algorithms. The\n * |options.subtree| is checked to ensure that the callback is called\n * correctly.\n *\n * @param {Node} target\n * @param {function(MutationObserverInit):MutationRecord} callback\n */\nfunction forEachAncestorAndObserverEnqueueRecord(target: IElement, callback) {\n  for (let node = target; node; node = node.parentNode as IElement) {\n    const registrations = registrationsTable.get(node);\n\n    if (registrations) {\n      for (let j = 0; j < registrations.length; j++) {\n        const registration = registrations[j];\n        const { options } = registration;\n\n        // Only target ignores subtree.\n        if (node !== target && !options.subtree) continue;\n\n        const record = callback(options);\n        if (record) registration.enqueue(record);\n      }\n    }\n  }\n}\n\n// This is used to ensure that we never schedule 2 callas to setImmediate\nlet isScheduled = false;\n\n// Keep track of observers that needs to be notified next time.\nlet scheduledObservers: MutationObserver[] = [];\n\n/**\n * Schedules |dispatchCallback| to be called in the future.\n */\nfunction scheduleCallback(observer: MutationObserver) {\n  scheduledObservers.push(observer);\n  if (!isScheduled) {\n    isScheduled = true;\n    // setImmediate(dispatchCallbacks);\n    if (typeof runtime.globalThis !== 'undefined') {\n      runtime.globalThis.setTimeout(dispatchCallbacks);\n    } else {\n      dispatchCallbacks();\n    }\n  }\n}\nfunction dispatchCallbacks() {\n  // http://dom.spec.whatwg.org/#mutation-observers\n\n  isScheduled = false; // Used to allow a new setImmediate call above.\n\n  const observers = scheduledObservers;\n  scheduledObservers = [];\n  // Sort observers based on their creation UID (incremental).\n  observers.sort((o1, o2) => {\n    return o1.uid - o2.uid;\n  });\n\n  let anyNonEmpty = false;\n  observers.forEach(function (observer) {\n    // 2.1, 2.2\n    const queue = observer.takeRecords();\n    // 2.3. Remove all transient registered observers whose observer is mo.\n    removeTransientObserversFor(observer);\n\n    // 2.4\n    if (queue.length) {\n      // @ts-ignore\n      observer.callback(queue, observer);\n      anyNonEmpty = true;\n    }\n  });\n\n  // 3.\n  if (anyNonEmpty) dispatchCallbacks();\n}\n"],"names":["MutationRecord","type","target","_classCallCheck","addedNodes","attributeName","attributeNamespace","nextSibling","oldValue","previousSibling","removedNodes","_createClass","key","value","copy","original","record","slice","uidCounter","registrationsTable","WeakMap","Registration","observer","options","transientObservedNodes","enqueue","records","length","lastRecord","recordToReplaceLast","selectRecord","scheduleCallback","addListeners","addListeners_","node","attributes","addEventListener","ElementEvent","ATTR_MODIFIED","childList","INSERTED","subtree","REMOVED","removeListeners","removeListeners_","removeEventListener","removeTransientObservers","forEach","registrations","get","i","splice","handleEvent","e","stopImmediatePropagation","name","attrName","namespace","relatedNode","namespaceURI","getRecord","attrChange","MutationEvent","ADDITION","prevValue","forEachAncestorAndObserverEnqueueRecord","attributeFilter","indexOf","attributeOldValue","getRecordWithOldValue","changedNode","clearRecords","MutationObserver","callback","nodes","uid","observe","characterData","characterDataOldValue","SyntaxError","set","registration","push","disconnect","_this","takeRecords","copyOfRecords","currentRecord","recordWithOldValue","undefined","recordRepresentsCurrentMutation","newRecord","removeTransientObserversFor","parentNode","j","isScheduled","scheduledObservers","runtime","globalThis","setTimeout","dispatchCallbacks","observers","sort","o1","o2","anyNonEmpty","queue"],"mappings":"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"}