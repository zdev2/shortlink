import { corelib, plotlib, graphlib, geolib, stdlib } from './lib';
import { API, CompositionAPI } from './api/extend';
import { G2Spec } from './spec';
import type { SymbolFactor } from './utils/marker';
export { corelib, plotlib, graphlib, geolib, stdlib };
export * from './exports';
/**
 * G2 standard library initial all the libs except 3D and auto.
 */
declare const library: {
    'data.fetch': import("./runtime").DataComponent<import("./data").FetchOptions>;
    'data.inline': import("./runtime").DataComponent<import("./data").InlineOptions>;
    'data.sortBy': import("./runtime").DataComponent<import("./data").SortByOptions>;
    'data.sort': import("./runtime").DataComponent<import("./data").SortOptions>;
    'data.filter': import("./runtime").DataComponent<import("./data").FilterDataOptions>;
    'data.pick': import("./runtime").DataComponent<import("./data").PickOptions>;
    'data.rename': import("./runtime").DataComponent<import("./data").RenameOptions>;
    'data.fold': import("./runtime").DataComponent<import("./data").FoldOptions>;
    'data.slice': import("./runtime").DataComponent<import("./data").SliceOptions>;
    'data.custom': import("./runtime").DataComponent<import("./data").CustomOptions>;
    'data.map': import("./runtime").DataComponent<import("./data").MapOptions>;
    'data.join': import("./runtime").DataComponent<import("./data").JoinOptions>;
    'data.kde': import("./runtime").DataComponent<import("./data").KDEOptions>;
    'data.log': import("./runtime").DataComponent<import("./data").LogDataOptions>;
    'data.wordCloud': import("./runtime").DataComponent<Partial<import("./data").WordCloudOptions>>;
    'transform.stackY': import("./runtime").TransformComponent<import("./exports").StackYOptions>;
    'transform.binX': import("./runtime").TransformComponent<import("./exports").BinXOptions>;
    'transform.bin': import("./runtime").TransformComponent<import("./exports").BinOptions>;
    'transform.dodgeX': import("./runtime").TransformComponent<import("./exports").DodgeXOptions>;
    'transform.jitter': import("./runtime").TransformComponent<import("./exports").JitterOptions>;
    'transform.jitterX': import("./runtime").TransformComponent<import("./exports").JitterXOptions>;
    'transform.jitterY': import("./runtime").TransformComponent<import("./exports").JitterYOptions>;
    'transform.symmetryY': import("./runtime").TransformComponent<import("./exports").SymmetryYOptions>;
    'transform.diffY': import("./runtime").TransformComponent<import("./exports").DiffYOptions>;
    'transform.stackEnter': import("./runtime").TransformComponent<import("./exports").StackEnterOptions>;
    'transform.normalizeY': import("./runtime").TransformComponent<import("./exports").NormalizeYOptions>;
    'transform.select': import("./runtime").TransformComponent<import("./exports").SelectOptions>;
    'transform.selectX': import("./runtime").TransformComponent<import("./exports").SelectXOptions>;
    'transform.selectY': import("./runtime").TransformComponent<import("./exports").SelectYOptions>;
    'transform.groupX': import("./runtime").TransformComponent<import("./exports").GroupXOptions>;
    'transform.groupY': import("./runtime").TransformComponent<import("./exports").GroupYOptions>;
    'transform.groupColor': import("./runtime").TransformComponent<import("./exports").GroupColorOptions>;
    'transform.group': import("./runtime").TransformComponent<import("./exports").GroupOptions>;
    'transform.sortX': import("./runtime").TransformComponent<import("./exports").SortXOptions>;
    'transform.sortY': import("./runtime").TransformComponent<import("./exports").SortYOptions>;
    'transform.sortColor': import("./runtime").TransformComponent<import("./exports").SortColorOptions>;
    'transform.flexX': import("./runtime").TransformComponent<import("./exports").FlexXOptions>;
    'transform.pack': import("./runtime").TransformComponent<import("./exports").PackOptions>;
    'transform.sample': import("./runtime").TransformComponent<import("./exports").SampleOptions>;
    'transform.filter': import("./runtime").TransformComponent<import("./exports").FilterOptions>;
    'coordinate.cartesian': import("./runtime").CoordinateComponent<import("./coordinate").CartesianOptions>;
    'coordinate.polar': import("./runtime").CoordinateComponent<import("./coordinate").PolarOptions>;
    'coordinate.transpose': import("./runtime").CoordinateComponent<import("./coordinate").TransposeOptions>;
    'coordinate.theta': import("./runtime").CoordinateComponent<import("./spec").ThetaCoordinate>;
    'coordinate.parallel': import("./runtime").CoordinateComponent<import("./coordinate").ParallelOptions>;
    'coordinate.fisheye': import("./runtime").CoordinateComponent<import("./spec").FisheyeCoordinate>;
    'coordinate.radial': import("./runtime").CoordinateComponent<import("./coordinate").RadialOptions>;
    'coordinate.radar': import("./runtime").CoordinateComponent<import("./spec").RadarCoordinate>;
    'encode.constant': import("./runtime").EncodeComponent<import("./encode").ConstantOptions>;
    'encode.field': import("./runtime").EncodeComponent<import("./encode").FieldOptions>;
    'encode.transform': import("./runtime").EncodeComponent<import("./encode").TransformOptions>;
    'encode.column': import("./runtime").EncodeComponent<import("./encode").ColumnOptions>;
    'mark.interval': import("./exports").MarkComponent<import("./mark").IntervalOptions>;
    'mark.rect': import("./exports").MarkComponent<import("./mark").RectOptions>;
    'mark.line': import("./exports").MarkComponent<import("./mark").LineOptions>;
    'mark.point': import("./exports").MarkComponent<import("./mark").PointOptions>;
    'mark.text': import("./exports").MarkComponent<import("./mark").TextOptions>;
    'mark.cell': import("./exports").MarkComponent<import("./mark").CellOptions>;
    'mark.area': import("./exports").MarkComponent<import("./mark").AreaOptions>;
    'mark.link': import("./exports").MarkComponent<import("./mark").LinkOptions>;
    'mark.image': import("./exports").MarkComponent<import("./mark").ImageOptions>;
    'mark.polygon': import("./exports").MarkComponent<import("./mark").PolygonOptions>;
    'mark.box': import("./exports").MarkComponent<import("./mark").BoxOptions>;
    'mark.vector': import("./exports").MarkComponent<import("./mark").VectorOptions>;
    'mark.lineX': import("./exports").MarkComponent<import("./mark").LineXOptions>;
    'mark.lineY': import("./exports").MarkComponent<import("./mark").LineYOptions>;
    'mark.connector': import("./exports").MarkComponent<import("./mark").ConnectorOptions>;
    'mark.range': import("./exports").MarkComponent<import("./mark").RangeOptions>;
    'mark.rangeX': import("./exports").MarkComponent<import("./mark").RangeXOptions>;
    'mark.rangeY': import("./exports").MarkComponent<import("./mark").RangeYOptions>;
    'mark.path': import("./exports").MarkComponent<import("./mark/path").PathOptions>;
    'mark.shape': import("./exports").MarkComponent<import("./mark").ShapeOptions>;
    'mark.density': import("./exports").MarkComponent<import("./mark").DensityOptions>;
    'mark.heatmap': import("./exports").MarkComponent<import("./mark").HeatmapOptions>;
    'mark.wordCloud': import("./runtime").CompositeMarkComponent<import("./mark").WordCloudOptions>;
    'palette.category10': import("./runtime").PaletteComponent<import("./palette").Category10Options>;
    'palette.category20': import("./runtime").PaletteComponent<import("./palette").Category20Options>;
    'scale.linear': import("./runtime").ScaleComponent<import("./scale").LinearOptions>;
    'scale.ordinal': import("./runtime").ScaleComponent<import("./scale").OrdinalOptions>;
    'scale.band': import("./runtime").ScaleComponent<import("./scale").BandOptions>;
    'scale.identity': import("./runtime").ScaleComponent<import("./scale").IdentityOptions>;
    'scale.point': import("./runtime").ScaleComponent<import("./scale").PointOptions>;
    'scale.time': import("./runtime").ScaleComponent<import("./scale").TimeOptions>;
    'scale.log': import("./runtime").ScaleComponent<import("./scale").LogOptions>;
    'scale.pow': import("./runtime").ScaleComponent<import("./scale").PowOptions>;
    'scale.sqrt': import("./runtime").ScaleComponent<import("./scale").SqrtOptions>;
    'scale.threshold': import("./runtime").ScaleComponent<import("./scale").ThresholdOptions>;
    'scale.quantile': import("./runtime").ScaleComponent<import("./scale").QuantileOptions>;
    'scale.quantize': import("./runtime").ScaleComponent<import("./scale").QuantizeOptions>;
    'scale.sequential': import("./runtime").ScaleComponent<import("./scale").SequentialOptions>;
    'scale.constant': import("./runtime").ScaleComponent<import("./scale").ConstantOptions>;
    'theme.classic': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.classicDark': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.academy': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.light': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.dark': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'component.axisX': import("./exports").GuideComponentComponent<import("./exports").AxisOptions>;
    'component.axisY': import("./exports").GuideComponentComponent<import("./exports").AxisOptions>;
    'component.legendCategory': import("./exports").GuideComponentComponent<import("./component").LegendCategoryOptions>;
    'component.legendContinuous': import("./exports").GuideComponentComponent<import("./component").LegendContinuousOptions>;
    'component.legends': import("./exports").GuideComponentComponent<import("./component").LegendsOptions>;
    'component.title': import("./exports").GuideComponentComponent<import("./runtime").G2Title>;
    'component.sliderX': import("./exports").GuideComponentComponent<import("./component/slider").SliderOptions>;
    'component.sliderY': import("./exports").GuideComponentComponent<import("./component/slider").SliderOptions>;
    'component.scrollbarX': import("./exports").GuideComponentComponent<import("./component/scrollbar").ScrollbarOptions>;
    'component.scrollbarY': import("./exports").GuideComponentComponent<import("./component/scrollbar").ScrollbarOptions>;
    'animation.scaleInX': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.scaleOutX': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.scaleInY': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.scaleOutY': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.waveIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.fadeIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.fadeOut': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.zoomIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.zoomOut': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.pathIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.morphing': import("./runtime").AnimationComponent<import("./animation").MorphingOptions>;
    'animation.growInX': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.growInY': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'interaction.elementHighlight': typeof import("./interaction").ElementHighlight;
    'interaction.elementHighlightByX': typeof import("./interaction").ElementHighlightByX;
    'interaction.elementHighlightByColor': typeof import("./interaction").ElementHighlightByColor;
    'interaction.elementSelect': typeof import("./interaction").ElementSelect;
    'interaction.elementSelectByX': typeof import("./interaction").ElementSelectByX;
    'interaction.elementSelectByColor': typeof import("./interaction").ElementSelectByColor;
    'interaction.fisheye': typeof import("./interaction").Fisheye;
    'interaction.chartIndex': typeof import("./interaction").ChartIndex;
    'interaction.tooltip': typeof import("./interaction").Tooltip;
    'interaction.legendFilter': typeof import("./interaction").LegendFilter;
    'interaction.legendHighlight': typeof import("./interaction").LegendHighlight;
    'interaction.brushHighlight': typeof import("./interaction").BrushHighlight;
    'interaction.brushXHighlight': typeof import("./interaction").BrushXHighlight;
    'interaction.brushYHighlight': typeof import("./interaction").BrushYHighlight;
    'interaction.brushAxisHighlight': typeof import("./interaction").BrushAxisHighlight;
    'interaction.brushFilter': typeof import("./interaction").BrushFilter;
    'interaction.brushXFilter': typeof import("./interaction").BrushXFilter;
    'interaction.brushYFilter': typeof import("./interaction").BrushYFilter;
    'interaction.sliderFilter': typeof import("./interaction").SliderFilter;
    'interaction.scrollbarFilter': typeof import("./interaction").ScrollbarFilter;
    'interaction.poptip': typeof import("./interaction").Poptip;
    'interaction.treemapDrillDown': typeof import("./interaction").TreemapDrillDown;
    'interaction.elementPointMove': typeof import("./interaction").ElementPointMove;
    'composition.spaceLayer': import("./runtime").CompositionComponent<import("./composition").SpaceLayerOptions>;
    'composition.spaceFlex': import("./runtime").CompositionComponent<import("./composition").SpaceFlexOptions>;
    'composition.facetRect': import("./runtime").CompositionComponent<import("./composition").FacetRectOptions>;
    'composition.repeatMatrix': import("./runtime").CompositionComponent<import("./spec").RepeatMatrixComposition>;
    'composition.facetCircle': import("./runtime").CompositionComponent<import("./spec").FacetCircleComposition>;
    'composition.timingKeyframe': import("./runtime").CompositionComponent<import("./composition").TimingKeyframeOptions>;
    'labelTransform.overlapHide': import("./runtime").LabelTransformComponent<import("./label-transform").OverlapHideOptions>;
    'labelTransform.overlapDodgeY': import("./runtime").LabelTransformComponent<import("./label-transform").OverlapDodgeYOptions>;
    'labelTransform.overflowHide': import("./runtime").LabelTransformComponent<import("./label-transform").OverflowHideOptions>;
    'labelTransform.contrastReverse': import("./runtime").LabelTransformComponent<import("./label-transform").ContrastReverseOptions>;
    'labelTransform.exceedAdjust': import("./runtime").LabelTransformComponent<import("./label-transform").ExceedAdjustOptions>;
    'data.venn': import("./runtime").DataComponent<import("./data").VennOptions>;
    'mark.boxplot': import("./runtime").CompositeMarkComponent<import("./mark/boxplot").BoxPlotOptions>;
    'mark.gauge': import("./runtime").CompositeMarkComponent<import("./mark").GaugeOptions>;
    'mark.liquid': import("./runtime").CompositeMarkComponent<import("./mark").LiquidOptions>;
    'data.arc': import("./runtime").DataComponent<import("./data").ArcOptions>;
    'data.cluster': import("./runtime").DataComponent<import("./data").ClusterOptions>;
    'mark.forceGraph': import("./runtime").CompositeMarkComponent<import("./mark").ForceGraphOptions>;
    'mark.tree': import("./runtime").CompositeMarkComponent<import("./mark").TreeOptions>;
    'mark.pack': import("./runtime").CompositionComponent<import("./mark").PackOptions>;
    'mark.sankey': import("./runtime").CompositeMarkComponent<import("./mark").SankeyOptions>;
    'mark.chord': import("./runtime").CompositeMarkComponent<import("./mark").ChordOptions>;
    'mark.treemap': import("./runtime").CompositionComponent<import("./mark").TreemapOptions>;
    'composition.geoView': import("./runtime").CompositionComponent<import("./composition/geoView").GeoViewOptions>;
    'composition.geoPath': import("./runtime").CompositionComponent<import("./composition/geoPath").GeoPathOptions>;
};
export type { SymbolFactor };
export declare const Chart: new (options?: import("./api/runtime").RuntimeOptions) => API<G2Spec, {
    'data.fetch': import("./runtime").DataComponent<import("./data").FetchOptions>;
    'data.inline': import("./runtime").DataComponent<import("./data").InlineOptions>;
    'data.sortBy': import("./runtime").DataComponent<import("./data").SortByOptions>;
    'data.sort': import("./runtime").DataComponent<import("./data").SortOptions>;
    'data.filter': import("./runtime").DataComponent<import("./data").FilterDataOptions>;
    'data.pick': import("./runtime").DataComponent<import("./data").PickOptions>;
    'data.rename': import("./runtime").DataComponent<import("./data").RenameOptions>;
    'data.fold': import("./runtime").DataComponent<import("./data").FoldOptions>;
    'data.slice': import("./runtime").DataComponent<import("./data").SliceOptions>;
    'data.custom': import("./runtime").DataComponent<import("./data").CustomOptions>;
    'data.map': import("./runtime").DataComponent<import("./data").MapOptions>;
    'data.join': import("./runtime").DataComponent<import("./data").JoinOptions>;
    'data.kde': import("./runtime").DataComponent<import("./data").KDEOptions>;
    'data.log': import("./runtime").DataComponent<import("./data").LogDataOptions>;
    'data.wordCloud': import("./runtime").DataComponent<Partial<import("./data").WordCloudOptions>>;
    'transform.stackY': import("./runtime").TransformComponent<import("./exports").StackYOptions>;
    'transform.binX': import("./runtime").TransformComponent<import("./exports").BinXOptions>;
    'transform.bin': import("./runtime").TransformComponent<import("./exports").BinOptions>;
    'transform.dodgeX': import("./runtime").TransformComponent<import("./exports").DodgeXOptions>;
    'transform.jitter': import("./runtime").TransformComponent<import("./exports").JitterOptions>;
    'transform.jitterX': import("./runtime").TransformComponent<import("./exports").JitterXOptions>;
    'transform.jitterY': import("./runtime").TransformComponent<import("./exports").JitterYOptions>;
    'transform.symmetryY': import("./runtime").TransformComponent<import("./exports").SymmetryYOptions>;
    'transform.diffY': import("./runtime").TransformComponent<import("./exports").DiffYOptions>;
    'transform.stackEnter': import("./runtime").TransformComponent<import("./exports").StackEnterOptions>;
    'transform.normalizeY': import("./runtime").TransformComponent<import("./exports").NormalizeYOptions>;
    'transform.select': import("./runtime").TransformComponent<import("./exports").SelectOptions>;
    'transform.selectX': import("./runtime").TransformComponent<import("./exports").SelectXOptions>;
    'transform.selectY': import("./runtime").TransformComponent<import("./exports").SelectYOptions>;
    'transform.groupX': import("./runtime").TransformComponent<import("./exports").GroupXOptions>;
    'transform.groupY': import("./runtime").TransformComponent<import("./exports").GroupYOptions>;
    'transform.groupColor': import("./runtime").TransformComponent<import("./exports").GroupColorOptions>;
    'transform.group': import("./runtime").TransformComponent<import("./exports").GroupOptions>;
    'transform.sortX': import("./runtime").TransformComponent<import("./exports").SortXOptions>;
    'transform.sortY': import("./runtime").TransformComponent<import("./exports").SortYOptions>;
    'transform.sortColor': import("./runtime").TransformComponent<import("./exports").SortColorOptions>;
    'transform.flexX': import("./runtime").TransformComponent<import("./exports").FlexXOptions>;
    'transform.pack': import("./runtime").TransformComponent<import("./exports").PackOptions>;
    'transform.sample': import("./runtime").TransformComponent<import("./exports").SampleOptions>;
    'transform.filter': import("./runtime").TransformComponent<import("./exports").FilterOptions>;
    'coordinate.cartesian': import("./runtime").CoordinateComponent<import("./coordinate").CartesianOptions>;
    'coordinate.polar': import("./runtime").CoordinateComponent<import("./coordinate").PolarOptions>;
    'coordinate.transpose': import("./runtime").CoordinateComponent<import("./coordinate").TransposeOptions>;
    'coordinate.theta': import("./runtime").CoordinateComponent<import("./spec").ThetaCoordinate>;
    'coordinate.parallel': import("./runtime").CoordinateComponent<import("./coordinate").ParallelOptions>;
    'coordinate.fisheye': import("./runtime").CoordinateComponent<import("./spec").FisheyeCoordinate>;
    'coordinate.radial': import("./runtime").CoordinateComponent<import("./coordinate").RadialOptions>;
    'coordinate.radar': import("./runtime").CoordinateComponent<import("./spec").RadarCoordinate>;
    'encode.constant': import("./runtime").EncodeComponent<import("./encode").ConstantOptions>;
    'encode.field': import("./runtime").EncodeComponent<import("./encode").FieldOptions>;
    'encode.transform': import("./runtime").EncodeComponent<import("./encode").TransformOptions>;
    'encode.column': import("./runtime").EncodeComponent<import("./encode").ColumnOptions>;
    'mark.interval': import("./exports").MarkComponent<import("./mark").IntervalOptions>;
    'mark.rect': import("./exports").MarkComponent<import("./mark").RectOptions>;
    'mark.line': import("./exports").MarkComponent<import("./mark").LineOptions>;
    'mark.point': import("./exports").MarkComponent<import("./mark").PointOptions>;
    'mark.text': import("./exports").MarkComponent<import("./mark").TextOptions>;
    'mark.cell': import("./exports").MarkComponent<import("./mark").CellOptions>;
    'mark.area': import("./exports").MarkComponent<import("./mark").AreaOptions>;
    'mark.link': import("./exports").MarkComponent<import("./mark").LinkOptions>;
    'mark.image': import("./exports").MarkComponent<import("./mark").ImageOptions>;
    'mark.polygon': import("./exports").MarkComponent<import("./mark").PolygonOptions>;
    'mark.box': import("./exports").MarkComponent<import("./mark").BoxOptions>;
    'mark.vector': import("./exports").MarkComponent<import("./mark").VectorOptions>;
    'mark.lineX': import("./exports").MarkComponent<import("./mark").LineXOptions>;
    'mark.lineY': import("./exports").MarkComponent<import("./mark").LineYOptions>;
    'mark.connector': import("./exports").MarkComponent<import("./mark").ConnectorOptions>;
    'mark.range': import("./exports").MarkComponent<import("./mark").RangeOptions>;
    'mark.rangeX': import("./exports").MarkComponent<import("./mark").RangeXOptions>;
    'mark.rangeY': import("./exports").MarkComponent<import("./mark").RangeYOptions>;
    'mark.path': import("./exports").MarkComponent<import("./mark/path").PathOptions>;
    'mark.shape': import("./exports").MarkComponent<import("./mark").ShapeOptions>;
    'mark.density': import("./exports").MarkComponent<import("./mark").DensityOptions>;
    'mark.heatmap': import("./exports").MarkComponent<import("./mark").HeatmapOptions>;
    'mark.wordCloud': import("./runtime").CompositeMarkComponent<import("./mark").WordCloudOptions>;
    'palette.category10': import("./runtime").PaletteComponent<import("./palette").Category10Options>;
    'palette.category20': import("./runtime").PaletteComponent<import("./palette").Category20Options>;
    'scale.linear': import("./runtime").ScaleComponent<import("./scale").LinearOptions>;
    'scale.ordinal': import("./runtime").ScaleComponent<import("./scale").OrdinalOptions>;
    'scale.band': import("./runtime").ScaleComponent<import("./scale").BandOptions>;
    'scale.identity': import("./runtime").ScaleComponent<import("./scale").IdentityOptions>;
    'scale.point': import("./runtime").ScaleComponent<import("./scale").PointOptions>;
    'scale.time': import("./runtime").ScaleComponent<import("./scale").TimeOptions>;
    'scale.log': import("./runtime").ScaleComponent<import("./scale").LogOptions>;
    'scale.pow': import("./runtime").ScaleComponent<import("./scale").PowOptions>;
    'scale.sqrt': import("./runtime").ScaleComponent<import("./scale").SqrtOptions>;
    'scale.threshold': import("./runtime").ScaleComponent<import("./scale").ThresholdOptions>;
    'scale.quantile': import("./runtime").ScaleComponent<import("./scale").QuantileOptions>;
    'scale.quantize': import("./runtime").ScaleComponent<import("./scale").QuantizeOptions>;
    'scale.sequential': import("./runtime").ScaleComponent<import("./scale").SequentialOptions>;
    'scale.constant': import("./runtime").ScaleComponent<import("./scale").ConstantOptions>;
    'theme.classic': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.classicDark': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.academy': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.light': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'theme.dark': import("./runtime").ThemeComponent<import("./runtime").G2Theme>;
    'component.axisX': import("./exports").GuideComponentComponent<import("./exports").AxisOptions>;
    'component.axisY': import("./exports").GuideComponentComponent<import("./exports").AxisOptions>;
    'component.legendCategory': import("./exports").GuideComponentComponent<import("./component").LegendCategoryOptions>;
    'component.legendContinuous': import("./exports").GuideComponentComponent<import("./component").LegendContinuousOptions>;
    'component.legends': import("./exports").GuideComponentComponent<import("./component").LegendsOptions>;
    'component.title': import("./exports").GuideComponentComponent<import("./runtime").G2Title>;
    'component.sliderX': import("./exports").GuideComponentComponent<import("./component/slider").SliderOptions>;
    'component.sliderY': import("./exports").GuideComponentComponent<import("./component/slider").SliderOptions>;
    'component.scrollbarX': import("./exports").GuideComponentComponent<import("./component/scrollbar").ScrollbarOptions>;
    'component.scrollbarY': import("./exports").GuideComponentComponent<import("./component/scrollbar").ScrollbarOptions>;
    'animation.scaleInX': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.scaleOutX': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.scaleInY': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.scaleOutY': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.waveIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.fadeIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.fadeOut': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.zoomIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.zoomOut': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.pathIn': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.morphing': import("./runtime").AnimationComponent<import("./animation").MorphingOptions>;
    'animation.growInX': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'animation.growInY': import("./runtime").AnimationComponent<import("./animation/types").Animation>;
    'interaction.elementHighlight': typeof import("./interaction").ElementHighlight;
    'interaction.elementHighlightByX': typeof import("./interaction").ElementHighlightByX;
    'interaction.elementHighlightByColor': typeof import("./interaction").ElementHighlightByColor;
    'interaction.elementSelect': typeof import("./interaction").ElementSelect;
    'interaction.elementSelectByX': typeof import("./interaction").ElementSelectByX;
    'interaction.elementSelectByColor': typeof import("./interaction").ElementSelectByColor;
    'interaction.fisheye': typeof import("./interaction").Fisheye;
    'interaction.chartIndex': typeof import("./interaction").ChartIndex;
    'interaction.tooltip': typeof import("./interaction").Tooltip;
    'interaction.legendFilter': typeof import("./interaction").LegendFilter;
    'interaction.legendHighlight': typeof import("./interaction").LegendHighlight;
    'interaction.brushHighlight': typeof import("./interaction").BrushHighlight;
    'interaction.brushXHighlight': typeof import("./interaction").BrushXHighlight;
    'interaction.brushYHighlight': typeof import("./interaction").BrushYHighlight;
    'interaction.brushAxisHighlight': typeof import("./interaction").BrushAxisHighlight;
    'interaction.brushFilter': typeof import("./interaction").BrushFilter;
    'interaction.brushXFilter': typeof import("./interaction").BrushXFilter;
    'interaction.brushYFilter': typeof import("./interaction").BrushYFilter;
    'interaction.sliderFilter': typeof import("./interaction").SliderFilter;
    'interaction.scrollbarFilter': typeof import("./interaction").ScrollbarFilter;
    'interaction.poptip': typeof import("./interaction").Poptip;
    'interaction.treemapDrillDown': typeof import("./interaction").TreemapDrillDown;
    'interaction.elementPointMove': typeof import("./interaction").ElementPointMove;
    'composition.spaceLayer': import("./runtime").CompositionComponent<import("./composition").SpaceLayerOptions>;
    'composition.spaceFlex': import("./runtime").CompositionComponent<import("./composition").SpaceFlexOptions>;
    'composition.facetRect': import("./runtime").CompositionComponent<import("./composition").FacetRectOptions>;
    'composition.repeatMatrix': import("./runtime").CompositionComponent<import("./spec").RepeatMatrixComposition>;
    'composition.facetCircle': import("./runtime").CompositionComponent<import("./spec").FacetCircleComposition>;
    'composition.timingKeyframe': import("./runtime").CompositionComponent<import("./composition").TimingKeyframeOptions>;
    'labelTransform.overlapHide': import("./runtime").LabelTransformComponent<import("./label-transform").OverlapHideOptions>;
    'labelTransform.overlapDodgeY': import("./runtime").LabelTransformComponent<import("./label-transform").OverlapDodgeYOptions>;
    'labelTransform.overflowHide': import("./runtime").LabelTransformComponent<import("./label-transform").OverflowHideOptions>;
    'labelTransform.contrastReverse': import("./runtime").LabelTransformComponent<import("./label-transform").ContrastReverseOptions>;
    'labelTransform.exceedAdjust': import("./runtime").LabelTransformComponent<import("./label-transform").ExceedAdjustOptions>;
    'data.venn': import("./runtime").DataComponent<import("./data").VennOptions>;
    'mark.boxplot': import("./runtime").CompositeMarkComponent<import("./mark/boxplot").BoxPlotOptions>;
    'mark.gauge': import("./runtime").CompositeMarkComponent<import("./mark").GaugeOptions>;
    'mark.liquid': import("./runtime").CompositeMarkComponent<import("./mark").LiquidOptions>;
    'data.arc': import("./runtime").DataComponent<import("./data").ArcOptions>;
    'data.cluster': import("./runtime").DataComponent<import("./data").ClusterOptions>;
    'mark.forceGraph': import("./runtime").CompositeMarkComponent<import("./mark").ForceGraphOptions>;
    'mark.tree': import("./runtime").CompositeMarkComponent<import("./mark").TreeOptions>;
    'mark.pack': import("./runtime").CompositionComponent<import("./mark").PackOptions>;
    'mark.sankey': import("./runtime").CompositeMarkComponent<import("./mark").SankeyOptions>;
    'mark.chord': import("./runtime").CompositeMarkComponent<import("./mark").ChordOptions>;
    'mark.treemap': import("./runtime").CompositionComponent<import("./mark").TreemapOptions>;
    'composition.geoView': import("./runtime").CompositionComponent<import("./composition/geoView").GeoViewOptions>;
    'composition.geoPath': import("./runtime").CompositionComponent<import("./composition/geoPath").GeoPathOptions>;
}>;
export interface Chart extends API<G2Spec, typeof library> {
}
export interface CompositionNode extends CompositionAPI<typeof library> {
}
